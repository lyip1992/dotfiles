extends c

snippet enum "Enumeration" b
enum ${1:name} { $0 };
endsnippet

snippet cl "Class" w
class ${1:name_t} {
	private:
		${0:/* data */}
		
	public:
		$1(${2:arguments});
		virtual ~$1();
};
endsnippet

snippet ns "Namespace" b
namespace ${1:name} {
	$2
} /* $1 */
endsnippet

snippet cout "cout" b
std::cout << ${1:"/* message */"} << $2std::endl;
endsnippet

snippet cin "cin" b
std::cin >> ${1:/* variable */};
endsnippet

snippet cerr "cerr" b
std::cerr << "${1:/* error message */}" << std::endl;
endsnippet

snippet map "map" b
std::map<${1:key}, ${2:value}> map$3;
endsnippet

snippet str "string"
std::string
endsnippet

snippet vector "vector" b
std::vector<${1:char}> v$2;
endsnippet

snippet tp "template <typename>" b
template <typename ${1:_InputIter}>
endsnippet

snippet outf "output file" b
ofstream ${1:afile}("${2:filename.txt}", ios::out);
if( $1.is_open() ){
	$1 << "${3:This is a line.}\n";
	$1.close();
}
endsnippet

snippet inf "input file" b
ifstream ${1:afile}("${2:filename.txt}", ios::in);
if( $1.is_open() ){
	string buffer;
	while( getline(myfile, buffer) ){
		cout << line << endl;
	}
	$1.close();
} else {
	cout << "Unable to open file" << endl;
}
endsnippet
